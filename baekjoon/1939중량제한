#include<iostream>
#include<vector>
#include<queue>
using namespace std;


int n, m;
vector<vector<pair<int,int>>> v;
int a, b, c;
int visit[100001];
bool check(int weight) {
	queue<int> q;
	q.push(a);

	while (!q.empty())
	{
		c = q.front();
		q.pop();
		if (c == b) return true;
		for (auto x : v[c]) {
			if (x.second >= weight) {
				if (visit[x.first]) continue;
				visit[x.first] = 1;
				q.push(x.first);
			}
		}
	}
	return false;
}
int main() {
	int min, max, mid;
	cin >> n >> m;
	v.resize(n + 1);
	min = max = mid = 0;
	for (int i = 0; i < m; i++) {
		cin >> a >> b >> c;
		v[a].push_back({ b, c });
		v[b].push_back({ a, c });
		if (max < c) max = c;
	}
	cin >> a >> b;
	min = 1;
	int anw = 0;
	while (min <= max){
		mid = (min + max) / 2;
		fill_n(&visit[0], 100001, 0);
		visit[a] = 1;
		if (check(mid)) {
			min = mid + 1;
			if (anw < mid)anw = mid;
		}
		else {
			max = mid - 1;
		}
	}
	cout << anw;
	return 0;
}
